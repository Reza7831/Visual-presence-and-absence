import sys
import os
import numpy as np
from face_recognition_system.videocamera import VideoCamera
from face_recognition_system.detectors import FaceDetector
import face_recognition_system.operations as op
import cv2
from cv2 import __version__
# اضافه کردن کتابخانه های مورد نیاز

def get_images(frame, faces_coord, shape):
    
    if shape == "rectangle":
        faces_img = op.cut_face_rectangle(frame, faces_coord)
        frame = op.draw_face_rectangle(frame, faces_coord)
    faces_img = op.normalize_intensity(faces_img)
    faces_img = op.resize(faces_img)
    return (frame, faces_img)
# این تابع کار دریافت اطلاعات تصویر و در نهایت دریافت خود تصویر را انجام می دهد

def add_person(people_folder, shape):

    person_name = input("What is the name of the new person: ").lower()
    folder = people_folder + person_name
    if not os.path.exists(folder):
        input("I will now take 20 pictures. Press ENTER when ready.")
        os.mkdir(folder)
        video = VideoCamera()
        detector = FaceDetector('face_recognition_system/frontal_face.xml')
        counter = 1
        timer = 0
        cv2.namedWindow('Video Feed', cv2.WINDOW_AUTOSIZE)
        cv2.namedWindow('Saved Face', cv2.WINDOW_NORMAL)
        while counter < 21:
            frame = video.get_frame()
            face_coord = detector.detect(frame)
            if len(face_coord):
                frame, face_img = get_images(frame, face_coord, shape)

                if timer % 100 == 5:
                    cv2.imwrite(folder + '/' + str(counter) + '.jpg', face_img[0])
                    print ('Images Saved:' + str(counter))
                    counter += 1
                    cv2.imshow('Saved Face', face_img[0])

            cv2.imshow('Video Feed', frame)
            cv2.waitKey(50)
            timer += 5
    else:
        print ("This name already exists.")
        sys.exit()

 # این تابع کار اضافه کردن تصویر را انجام می دهد و نحوه غملکرد آن اینگونه است که
 # اگر برای اولین بار این کار را انجام می دهید ابتدا یک اسم شخص و سپس 20 عکس
 # از زوایای مختلف از شما میگیرد, و در مرحله بعد عکس به صورت خودکار به آدرس فولدری که تعیین کردیم ذخیره می شود
 

def recognize_people(people_folder, shape):

    try:
        people = [person for person in os.listdir(people_folder)]
    except:
        print ("Haveyou added at least one person to the system?")
        sys.exit()
    print ("This are the people in the Recognition System:")
    for person in people:
        print ("-" + person)
    print (30 * '-')
    print (" POSSIBLERECOGNIZERS TO USE")
    print (30 * '-')
    print ("1. EigenFaces")
    print ("2. FisherFaces")
    print ("3. LBPHFaces")
    print (30 * '-')
#این قسمت استفاده از موتور های شتاسایی است که همگی در همین کتابخانه است هر کدام از موتور ها به صورت
# کاملا دلخواه است
    choice = check_choice()

    detector = FaceDetector('face_recognition_system/frontal_face.xml')
    if choice == 1:
        recognizer = cv2.face.createEigenFacesRecognizer()
        threshold = 4000
    
    elif choice == 2:
        recognizer = cv2.face.createFisherFacesRecognizer()
        threshold = 300

    elif choice == 3:
        recognizer = cv2.face.createLBPHFacesRecognizer()
        threshold = 80
    images = []
    labels = []
    labels_people = {}
    for i, person in enumerate(people):
        labels_people[i] = person
        for image in os.listdir(people_folder + person):
            images.append(cv2.imread(people_folder + person + '/' + image, 0))
            labels.append(i)
    try:
        recognizer.train(images, np.array(labels))
    except:
        print ("\nOpenCV Error: Do you have at least tow people in the database?\n")
        sys.exit()

    video = VideoCamera()
# پس از اینکه موتور شناسایی را انتخاب کردیم دوربین برای شناسایی تصویر فعال می شود
    while True:

        frame = video.get_frame()
        faces_coord = detector.detect(frame, False)
        if len(faces_coord):
            frame, faces_img = get_images(frame, faces_coord, shape)
            for i, face_img in enumerate(faces_img):
                if __version__ == "3.1.0":
                    collector = cv2.face.MinDistancePredictCollector()
                    recognizer.predict(face_img, collector)
                    conf = collector.getDist()
                    pred = collector.getLabel()
                else:
                    pred, conf = recognizer.predict(face_img)
                print ("Presiction: " + str(pred))
                print ("Confidence: " + str(round(conf)))
                if conf < threshold:
                    cv2.putText(frame, labels_people[pred].capitalize(),(faces_coord[i][0], faces_coord[i][1] -  2), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 1, cv2.LINE_AA)

                else:
                    cv2.putText(frame, "Unknown",(faces_coord[i][0], faces_coord[i][1]), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 1, cv2.LINE_AA)

        cv2.putText(frame, "ESC to exit", (5, frame.shape[0] - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 1, cv2.LINE_AA)
        cv2.imshow('Video', frame)
        if cv2.waitKey(100) & 0xFF == 27:
            sys.exit()
# در این قسمت فریم ویدیو مورد بررسی قرار میگیرد و در نهایت پس از اتمام کار خارج میگردد
def check_choice():

    is_valid = 0
    while not is_valid:
        try:
            choice = int(input('Enter your choice [1-3] : '))
            if choice in [1, 2, 3]:
                is_validn = 1
            else:
                print ("'%d' is not an option.\n" % choice)
        except ValueError:
            print ("%s is not an option.\n" % str(error).split(": ")[1])
    return choice
# این قسمت دقیقا مثل یک منو عمل میکند که کاربر میتونه گزینه مورد نظر خودش رو انتخاب کنه
if __name__ == '__main__':
    print (30 * '-')
    print ("  POSSIBLE ACTIONS")
    print (30 * '-')
    print ("1. Add person to the recognizer system")
    print ("2. Start recognizer")
    print ("3. Exit")
    print (30 * '-')

    CHOICE = check_choice()

    PEOPLE_FOLDER = "face_recognition_system/people/"
    SHAPE = "rectangle"

    if CHOICE == 1:
        if not os.path.exists(PEOPLE_FOLDER):
            os.makedirs(PEOPLE_FOLDER)
        add_person(PEOPLE_FOLDER, SHAPE)
    elif CHOICE == 2:
        os.system("sudo modprobe bcm2835-v4l2")
        recognize_people(PEOPLE_FOLDER, SHAPE)
    elif CHOICE == 3:
        sys.exit()
# این قسمت رویداد های گزینه هایی رو که انتخاب کردیم اجرا میکنه
